# --------------------------------------------------------------------------------
# SwiftLint Configuration File
#
# This configuration uses `only_rules` to explicitly enable every desired rule.
# It has been refined to prioritize safety, performance, and modern Swift
# practices, while removing overly strict or low-value stylistic rules.
# --------------------------------------------------------------------------------

# The `only_rules` list is intentionally explicit. Rules are grouped by category.
only_rules:
  # -- Rules for Safety & Bug Prevention --
  # These are the most important rules for preventing runtime crashes.
  - force_cast
  - force_try
  - force_unwrapping
  - discarded_notification_center_observer # Prevents memory leaks
  - duplicate_conditions # Finds logical errors
  - fatal_error_message # Enforces descriptive crash messages
  - identical_operands # Prevents typos like `x == x`
  - unowned_variable_capture # Prevents retain cycles in closures
  - notification_center_detachment
  - nsobject_prefer_isequal
  - overridden_super_call
  - prohibited_super_call
  - untyped_error_in_catch

  # -- Performance --
  - empty_count # Prefers `isEmpty` over `count == 0`
  - first_where # Prefers `first(where:)` over `filter {}.first`
  - last_where # Prefers `last(where:)` over `filter {}.last`
  - contains_over_filter_count
  - contains_over_filter_is_empty
  - contains_over_first_not_nil
  - sorted_first_last

  # -- Code Style & Modern Swift --
  - prefer_self_in_static_references # Prefers `Self` over the class name
  - unused_closure_parameter # Prefers `_` for unused parameters
  - legacy_cggeometry_functions
  - legacy_constant
  - legacy_constructor
  - legacy_nsgeometry_functions
  - legacy_random
  - redundant_void_return
  - syntactic_sugar
  - array_init
  - class_delegate_protocol
  - compiler_protocol_init
  - discouraged_direct_init
  - explicit_init # Note: Can be removed if too strict
  - prefer_key_path
  - prefer_self_type_over_type_of_self
  - prefer_zero_over_explicit_init
  - reduce_into
  - self_binding
  - shorthand_optional_binding
  - toggle_bool

  # -- Code Cleanup & Readability --
  - redundant_discardable_let
  - redundant_nil_coalescing
  - redundant_objc_attribute
  - redundant_optional_initialization
  - redundant_set_access_control
  - redundant_string_enum_value
  - redundant_type_annotation
  - superfluous_else
  - unneeded_break_in_switch
  - unneeded_override
  - unneeded_parentheses_in_closure_argument
  - unused_enumerated
  - unused_optional_binding
  - unused_setter_value

  # -- Formatting & Whitespace --
  - vertical_whitespace # **NEW**: This is the rule to control multiple newlines.
  - trailing_whitespace # Finds extra spaces at the end of lines.
  - trailing_semicolon # Removes Objective-C style semicolons.
  - closing_brace
  - closure_end_indentation
  - closure_spacing
  - collection_alignment
  - colon
  - comma
  - leading_whitespace
  - literal_expression_end_indentation
  - operator_usage_whitespace
  - return_arrow_whitespace
  - statement_position
  - switch_case_alignment
  - trailing_closure
  - trailing_comma
  - trailing_newline

  # -- Project & Naming Conventions --
  - identifier_name
  - generic_type_name
  - type_name 
  - deployment_target
  - duplicate_imports
  - inclusive_language

  # -- Other Enabled Rules --
  - accessibility_trait_for_button
  - blanket_disable_command
  - block_based_kvo
  - custom_rules
  - private_action
  - private_outlet
  - private_subject
  - private_swiftui_state

# --------------------------------------------------------------------------------
# Analyzer rules perform more complex analysis of the Swift AST.
# --------------------------------------------------------------------------------
analyzer_rules:
  - capture_variable
  - typesafe_array_init
  - unneeded_synthesized_initializer
  - unused_declaration
  - unused_import

# --------------------------------------------------------------------------------
# Individual Rule Configurations
# --------------------------------------------------------------------------------

# This allows a maximum of 2 empty line, preventing multiple consecutive newlines.
vertical_whitespace:
  max_empty_lines: 2

# The `identifier_name` rule has been relaxed to prevent errors on common
# single-letter variables like 'x', 'y' in coordinates or 'i' in loops.
identifier_name:
  min_length:
    warning: 1 
    error: 1 #
  allowed_symbols:
    - '_'
  excluded:
    - 'id'
    - 'x'
    - 'y'
    - 'z'
    - 'a'
    - 'b'

# --------------------------------------------------------------------------------
# Custom Rules
# --------------------------------------------------------------------------------
custom_rules:
  comments_space:
    name: "Space After Comment"
    regex: '(^ *//(?!\/)\S+)'
    message: "There should be a space after //"
    severity: error

  empty_line_after_guard:
    name: "Empty Line After Guard"
    regex: '(^ *guard[ a-zA-Z0-9=?.\(\),><!]*\{[ a-zA-Z0-9=?.\(\),><!]*\}\n *(?!(?:return|guard))\S+)'
    message: "There should be an empty line after a guard."
    severity: error

  empty_line_after_super:
    name: "Empty Line After Super"
    regex: '(^ *super\.[ a-zA-Z0-9=?.\(\)\{\}:,><!]*\n *(?!(?:\}|return))\S+)'
    message: "There should be an empty line after super calls."
    severity: error

  swiftui_scaledtofit:
    regex: 'aspectRatio\(contentMode: \.fit\)'
    message: 'Prefer `scaledToFit()`'

  swiftui_scaledtofill:
      regex: 'aspectRatio\(contentMode: \.fill\)'
      message: 'Prefer `scaledToFill()`'

  no_alignment_center:
    regex: '\b\(alignment: .center\b'
    message: 'This alignment is the default.'

  avoid_dateformatter_init:
    name: "DateFormatter Instantiation"
    regex: '\bDateFormatter\s*\(\)'
    message: "Creating a new DateFormatter is expensive. Prefer a static, reused instance, or use the .formatted() API for iOS 15+."
    severity: warning